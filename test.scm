(add-pvar-name "A" "B" "C" (make-arity))

;;4.9 (2)
(set-goal (pf "((A ord B) -> C) -> ((A -> C) & (B -> C))"))
(assume "x")
(split)
(assume "y")
(use "x")
(intro 0)
(use "y")
(assume "z")
(use "x")
(intro 1)
(use "z")
(cdp)

(add-pvar-name "P" "Q" (make-arity (py "alpha")))
(add-var-name "x" "z" "y" (py "alpha"))
 
;;4.8 (4) Pierce law
(set-goal (pf "((A -> B) -> A) -> A"))
(assume "a")
(use "Stab")
(assume "b")
(use "b")
(use "a")
(assume "c")
(use "Efq")
(use "b")
(use "c")
(cdp)

;;4.8 (3)
(set-goal (pf "(A -> B) ord (B -> A)"))
(use "Stab")
(assume "a")
(use "a")
(intro 0)
(assume "b")
(use "Efq")
(use "a")
(intro 1)
(assume "c")
(use "b")
(cdp)

;;4.8 (2)
(set-goal (pf "((A -> B) -> C) -> (A -> C) -> C"))
(assume "a" "b")
(use "Stab")
(assume "c")
(use "c")
(use "a")
(assume "d")
(use "Efq")
(use "c")
(use "b")
(use "d")
(cdp)

;;4.9 (4)
(set-goal (pf "ex x (P x -> B) -> all x P x -> B"))
(assume "a")
(ex-elim "a")
(assume "x0" "b" "c")
(use "b")
(use-with "c" (pt "x0"))
(cdp)

;;4.9 (3)
(set-goal (pf "(A -> excl x P x) -> excl x (A -> P x)"))
(assume "a")
(assume "b")
(use "b" (pt "x"))
(assume "c")
(inst-with "a" "c")
(exc-elim 4)
(assume "x0")
(assume "d")
(use "EfqLog")
(use "b" (pt "x0"))
(assume "_")
(use "d")
(cdp)

;;4.8 (1)
(set-goal (pf "(A -> ex x P x) -> ex x(A -> P x)"))
(assume "a")
(use "Stab")
(assume "b")
(use "b")
(ex-intro "x")
(assume "c")
(inst-with "a" "c")
(ex-elim 4)
(assume "x0" "d")
(use "Efq")
(use "b")
(ex-intro "x0")
(assume "_")
(use "d")
(cdp)

;;4.7
(set-goal (pf "(not not A -> not not B) -> not not(A -> B)"))
(assume "a")
(assume "b")
(use "b")
(assume "c")
(use "Efq")
(use "a")
(assume "d")
(use "d")
(use "c")
(assume "e")
(use "b")
(assume "_")
(use "e")
(cdp)


;;Not part of tasks
;;---------------------------------------
(set-goal (pf "all x(P x -> Q x) -> ex x P x -> ex x Q x"))
(assume "a" "b")
(ex-elim "b")
(assume "x0" "P_x0")
(ex-elim "b")
(assume "z" "q")
(ex-intro (pt "x0"))
(use-with "a" (pt "x0") "P_x0") 
(cdp)
